# Copyright 2016 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License

# This file configures the bookshelf application frontend. The frontend serves
# public web traffic.

# The bookshelf frontend replication controller ensures that at least 3
# instances of the bookshelf app are running on the cluster.
# For more info about Pods see:
#   https://cloud.google.com/container-engine/docs/pods/
# For more info about Replication Controllers:
#   https://cloud.google.com/container-engine/docs/replicationcontrollers/
apiVersion: v1
kind: ReplicationController
metadata:
  name: bookshelf-frontend
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: bookshelf
        tier: frontend
    spec:
      containers:
      - name: bookshelf-app
        # Replace $GCLOUD_PROJECT with your project ID or use `make template`.
        image: gcr.io/${project_name}/bookshelf:latest
        # This setting makes nodes pull the docker image every time before
        # starting the pod. This is useful when debugging, but should be turned
        # off in production.
        imagePullPolicy: Always
        # The PROCESSES environment variable is used by Honcho in the
        # Dockerfile's CMD to control which processes are started. In this
        # case, only the bookshelf process is needed.
        env:
        - name: PROCESSES
          value: bookshelf
        # The bookshelf process listens on port 8080 for web traffic by default.
        ports:
        - containerPort: 8080
        volumeMounts:
          - name: vault-assets
            mountPath: /etc/vault-assets
      - name: renewer-sidecar
        image: giantswarm/tiny-tools
        command:
          - "sh"
          - "-c"
          - >
            X_VAULT_TOKEN=$(cat /etc/vault-assets/vault_token);
            VAULT_LEASE_ID=$(cat /etc/vault-assets/lease_id);
            while true; do
              curl -sS -k -X PUT -H "X-Vault-Token: $X_VAULT_TOKEN" --data '{"lease_id": "'"$VAULT_LEASE_ID"'", "increment": 3600}' ${vault_address}/v1/sys/leases/renew;
              sleep 3480;
            done
        lifecycle:
          preStop:
            exec:
              command:
                - "sh"
                - "-c"
                - >
                  X_VAULT_TOKEN=$(cat /etc/vault-assets/vault_token);
                  VAULT_LEASE_ID=$(cat /etc/vault-assets/lease_id);
                  curl -sS -k -X PUT -H "X-Vault-Token: $X_VAULT_TOKEN" --data '{"lease_id": "'"$VAULT_LEASE_ID"'"}' ${vault_address}/v1/sys/leases/revoke;
        volumeMounts:
          - name: vault-assets
            mountPath: /etc/vault-assets
      volumes:
        - name: vault-assets
          emptyDir: {}
---

# The bookshelf service provides a load-balancing proxy over the bookshelf app
# pods. By specifying the type as a 'LoadBalancer', Container Engine will
# create an external HTTP load balancer.
# For more information about Services see:
#   https://cloud.google.com/container-engine/docs/services/
# For more information about external HTTP load balancing see:
#   https://cloud.google.com/container-engine/docs/load-balancer
apiVersion: v1
kind: Service
metadata:
  name: bookshelf-frontend
  labels:
    app: bookshelf
    tier: frontend
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: bookshelf
    tier: frontend
